https://webpack.js.org/


    Write Your Code
    src/index.js

    import bar from './bar';

    bar();
    src/bar.js

    export default function bar() {
    //
    }
    Bundle It
    Without config or provide custom webpack.config.js

    const path = require('path');

    module.exports = {
    entry: './src/index.js',
    output: {
      path: path.resolve(__dirname, 'dist'),
      filename: 'bundle.js'
    }
    };
    page.html

    <!doctype html>
    <html>
    <head>
      ...
    </head>
    <body>
      ...
      <script src="dist/bundle.js"></script>
    </body>
    </html>
    Then run webpack on the command-line to create bundle.js.

    Awesome isn't it? Let's dive in!
    Get Started quickly in our Guides section, or dig into the Concepts section for more high-level information on the core notions behind webpack.

https://webpack.js.org/concepts/

    Core Concepts:

        Entry
        Output
        Loaders
        Plugins
        Mode
        Browser Compatibility



https://webpack.js.org/concepts/#entry


    Entry

    An entry point indicates which module webpack should use to begin building out its internal dependency graph. webpack will figure out which other modules and libraries that entry point depends on (directly and indirectly).

    By default its value is ./src/index.js, 
    but you can specify 
        # a different 
        # multiple entry points
    by setting an entry property in the webpack configuration. 

    For example:

    webpack.config.js

    module.exports = {
      entry: './path/to/my/entry/file.js'
    };
    
    Learn more in the entry points section.


https://webpack.js.org/concepts/entry-points/

    Entry Points

    As mentioned in Getting Started, there are multiple ways to define the entry property in your webpack configuration. We will show you the ways you can configure the entry property, in addition to explaining why it may be useful to you.

    Single Entry (Shorthand) Syntax
    Usage: entry: string | [string]

    webpack.config.js

    module.exports = {
      entry: './path/to/my/entry/file.js'
    };
    The single entry syntax for the entry property is a shorthand for:

    webpack.config.js

    module.exports = {
      entry: {
        main: './path/to/my/entry/file.js'
      }
    };
    What happens when you pass an array to entry? Passing an array of file paths to the entry property creates what is known as a "multi-main entry". This is useful when you would like to inject multiple dependent files together and graph their dependencies into one "chunk".

    This is a great choice when you are looking to quickly setup a webpack configuration for an application or tool with one entry point (i.e. a library). However, there is not much flexibility in extending or scaling your configuration with this syntax.

    Object Syntax
    Usage: entry: { <entryChunkName> string | [string] }

    webpack.config.js

    module.exports = {
      entry: {
        app: './src/app.js',
        adminApp: './src/adminApp.js'
      }
    };
    
    The object syntax is more verbose. However, this is the most scalable way of defining entry/entries in your application.

    "Scalable webpack configurations" are ones that can be reused and combined with other partial configurations. This is a popular technique used to separate concerns by environment, build target, and runtime. They are then merged using specialized tools like webpack-merge.

    Scenarios
    Below is a list of entry configurations and their real-world use cases:

    Separate App and Vendor Entries
    In webpack version < 4 it was common to add vendors as a separate entry point to compile it as a separate file (in combination with the CommonsChunkPlugin).

    This is discouraged in webpack 4. Instead, the optimization.splitChunks option takes care of separating vendors and app modules and creating a separate file. Do not create an entry for vendors or other stuff that is not the starting point of execution.

    Multi Page Application
    webpack.config.js

    module.exports = {
      entry: {
        pageOne: './src/pageOne/index.js',
        pageTwo: './src/pageTwo/index.js',
        pageThree: './src/pageThree/index.js'
      }
    };
    What does this do? We are telling webpack that we would like 3 separate dependency graphs (like the above example).

    Why? In a multi-page application, the server is going to fetch a new HTML document for you. The page reloads this new document and assets are redownloaded. However, this gives us the unique opportunity to do things like using optimization.splitChunks to create bundles of shared application code between each page. Multi-page applications that reuse a lot of code/modules between entry points can greatly benefit from these techniques, as the number of entry points increases.

    As a rule of thumb: Use exactly one entry point for each HTML document.


https://webpack.js.org/concepts/dependency-graph/

    Dependency Graph

    Any time one file depends on another, webpack treats this as a dependency. This allows webpack to take non-code assets, such as images or web fonts, and also provide them as dependencies for your application.

    When webpack processes your application, it starts from a list of modules defined 
        on the command line or 
        in its config file. 

    Starting from these entry points, 
    webpack recursively builds a dependency graph 
    that includes every module your application needs, 
    then bundles all of those modules into a small number of bundles - often, just one - to be loaded by the browser.

    Bundling your application is especially powerful for HTTP/1.1 clients, as it minimizes the number of times your app has to wait while the browser starts a new request. For HTTP/2, you can also use Code Splitting to achieve best results.